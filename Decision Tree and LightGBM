{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "624df54a",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-10-25T01:31:42.926358Z",
     "iopub.status.busy": "2024-10-25T01:31:42.925903Z",
     "iopub.status.idle": "2024-10-25T01:31:44.047023Z",
     "shell.execute_reply": "2024-10-25T01:31:44.045522Z"
    },
    "papermill": {
     "duration": 1.139041,
     "end_time": "2024-10-25T01:31:44.050223",
     "exception": false,
     "start_time": "2024-10-25T01:31:42.911182",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/creditcardfraud/creditcard.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6a5d412e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T01:31:44.076148Z",
     "iopub.status.busy": "2024-10-25T01:31:44.075357Z",
     "iopub.status.idle": "2024-10-25T01:31:49.423540Z",
     "shell.execute_reply": "2024-10-25T01:31:49.422305Z"
    },
    "papermill": {
     "duration": 5.36467,
     "end_time": "2024-10-25T01:31:49.426942",
     "exception": false,
     "start_time": "2024-10-25T01:31:44.062272",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('/kaggle/input/creditcardfraud/creditcard.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9ad3ab58",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T01:31:49.451900Z",
     "iopub.status.busy": "2024-10-25T01:31:49.451371Z",
     "iopub.status.idle": "2024-10-25T01:31:49.496891Z",
     "shell.execute_reply": "2024-10-25T01:31:49.495393Z"
    },
    "papermill": {
     "duration": 0.061347,
     "end_time": "2024-10-25T01:31:49.499611",
     "exception": false,
     "start_time": "2024-10-25T01:31:49.438264",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Time</th>\n",
       "      <th>V1</th>\n",
       "      <th>V2</th>\n",
       "      <th>V3</th>\n",
       "      <th>V4</th>\n",
       "      <th>V5</th>\n",
       "      <th>V6</th>\n",
       "      <th>V7</th>\n",
       "      <th>V8</th>\n",
       "      <th>V9</th>\n",
       "      <th>...</th>\n",
       "      <th>V21</th>\n",
       "      <th>V22</th>\n",
       "      <th>V23</th>\n",
       "      <th>V24</th>\n",
       "      <th>V25</th>\n",
       "      <th>V26</th>\n",
       "      <th>V27</th>\n",
       "      <th>V28</th>\n",
       "      <th>Amount</th>\n",
       "      <th>Class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>-1.359807</td>\n",
       "      <td>-0.072781</td>\n",
       "      <td>2.536347</td>\n",
       "      <td>1.378155</td>\n",
       "      <td>-0.338321</td>\n",
       "      <td>0.462388</td>\n",
       "      <td>0.239599</td>\n",
       "      <td>0.098698</td>\n",
       "      <td>0.363787</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.018307</td>\n",
       "      <td>0.277838</td>\n",
       "      <td>-0.110474</td>\n",
       "      <td>0.066928</td>\n",
       "      <td>0.128539</td>\n",
       "      <td>-0.189115</td>\n",
       "      <td>0.133558</td>\n",
       "      <td>-0.021053</td>\n",
       "      <td>149.62</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.191857</td>\n",
       "      <td>0.266151</td>\n",
       "      <td>0.166480</td>\n",
       "      <td>0.448154</td>\n",
       "      <td>0.060018</td>\n",
       "      <td>-0.082361</td>\n",
       "      <td>-0.078803</td>\n",
       "      <td>0.085102</td>\n",
       "      <td>-0.255425</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.225775</td>\n",
       "      <td>-0.638672</td>\n",
       "      <td>0.101288</td>\n",
       "      <td>-0.339846</td>\n",
       "      <td>0.167170</td>\n",
       "      <td>0.125895</td>\n",
       "      <td>-0.008983</td>\n",
       "      <td>0.014724</td>\n",
       "      <td>2.69</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.358354</td>\n",
       "      <td>-1.340163</td>\n",
       "      <td>1.773209</td>\n",
       "      <td>0.379780</td>\n",
       "      <td>-0.503198</td>\n",
       "      <td>1.800499</td>\n",
       "      <td>0.791461</td>\n",
       "      <td>0.247676</td>\n",
       "      <td>-1.514654</td>\n",
       "      <td>...</td>\n",
       "      <td>0.247998</td>\n",
       "      <td>0.771679</td>\n",
       "      <td>0.909412</td>\n",
       "      <td>-0.689281</td>\n",
       "      <td>-0.327642</td>\n",
       "      <td>-0.139097</td>\n",
       "      <td>-0.055353</td>\n",
       "      <td>-0.059752</td>\n",
       "      <td>378.66</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.966272</td>\n",
       "      <td>-0.185226</td>\n",
       "      <td>1.792993</td>\n",
       "      <td>-0.863291</td>\n",
       "      <td>-0.010309</td>\n",
       "      <td>1.247203</td>\n",
       "      <td>0.237609</td>\n",
       "      <td>0.377436</td>\n",
       "      <td>-1.387024</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.108300</td>\n",
       "      <td>0.005274</td>\n",
       "      <td>-0.190321</td>\n",
       "      <td>-1.175575</td>\n",
       "      <td>0.647376</td>\n",
       "      <td>-0.221929</td>\n",
       "      <td>0.062723</td>\n",
       "      <td>0.061458</td>\n",
       "      <td>123.50</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.0</td>\n",
       "      <td>-1.158233</td>\n",
       "      <td>0.877737</td>\n",
       "      <td>1.548718</td>\n",
       "      <td>0.403034</td>\n",
       "      <td>-0.407193</td>\n",
       "      <td>0.095921</td>\n",
       "      <td>0.592941</td>\n",
       "      <td>-0.270533</td>\n",
       "      <td>0.817739</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.009431</td>\n",
       "      <td>0.798278</td>\n",
       "      <td>-0.137458</td>\n",
       "      <td>0.141267</td>\n",
       "      <td>-0.206010</td>\n",
       "      <td>0.502292</td>\n",
       "      <td>0.219422</td>\n",
       "      <td>0.215153</td>\n",
       "      <td>69.99</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Time        V1        V2        V3        V4        V5        V6        V7  \\\n",
       "0   0.0 -1.359807 -0.072781  2.536347  1.378155 -0.338321  0.462388  0.239599   \n",
       "1   0.0  1.191857  0.266151  0.166480  0.448154  0.060018 -0.082361 -0.078803   \n",
       "2   1.0 -1.358354 -1.340163  1.773209  0.379780 -0.503198  1.800499  0.791461   \n",
       "3   1.0 -0.966272 -0.185226  1.792993 -0.863291 -0.010309  1.247203  0.237609   \n",
       "4   2.0 -1.158233  0.877737  1.548718  0.403034 -0.407193  0.095921  0.592941   \n",
       "\n",
       "         V8        V9  ...       V21       V22       V23       V24       V25  \\\n",
       "0  0.098698  0.363787  ... -0.018307  0.277838 -0.110474  0.066928  0.128539   \n",
       "1  0.085102 -0.255425  ... -0.225775 -0.638672  0.101288 -0.339846  0.167170   \n",
       "2  0.247676 -1.514654  ...  0.247998  0.771679  0.909412 -0.689281 -0.327642   \n",
       "3  0.377436 -1.387024  ... -0.108300  0.005274 -0.190321 -1.175575  0.647376   \n",
       "4 -0.270533  0.817739  ... -0.009431  0.798278 -0.137458  0.141267 -0.206010   \n",
       "\n",
       "        V26       V27       V28  Amount  Class  \n",
       "0 -0.189115  0.133558 -0.021053  149.62      0  \n",
       "1  0.125895 -0.008983  0.014724    2.69      0  \n",
       "2 -0.139097 -0.055353 -0.059752  378.66      0  \n",
       "3 -0.221929  0.062723  0.061458  123.50      0  \n",
       "4  0.502292  0.219422  0.215153   69.99      0  \n",
       "\n",
       "[5 rows x 31 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f5c726bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T01:31:49.527825Z",
     "iopub.status.busy": "2024-10-25T01:31:49.527289Z",
     "iopub.status.idle": "2024-10-25T01:31:49.577644Z",
     "shell.execute_reply": "2024-10-25T01:31:49.576215Z"
    },
    "papermill": {
     "duration": 0.068371,
     "end_time": "2024-10-25T01:31:49.581093",
     "exception": false,
     "start_time": "2024-10-25T01:31:49.512722",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 284807 entries, 0 to 284806\n",
      "Data columns (total 31 columns):\n",
      " #   Column  Non-Null Count   Dtype  \n",
      "---  ------  --------------   -----  \n",
      " 0   Time    284807 non-null  float64\n",
      " 1   V1      284807 non-null  float64\n",
      " 2   V2      284807 non-null  float64\n",
      " 3   V3      284807 non-null  float64\n",
      " 4   V4      284807 non-null  float64\n",
      " 5   V5      284807 non-null  float64\n",
      " 6   V6      284807 non-null  float64\n",
      " 7   V7      284807 non-null  float64\n",
      " 8   V8      284807 non-null  float64\n",
      " 9   V9      284807 non-null  float64\n",
      " 10  V10     284807 non-null  float64\n",
      " 11  V11     284807 non-null  float64\n",
      " 12  V12     284807 non-null  float64\n",
      " 13  V13     284807 non-null  float64\n",
      " 14  V14     284807 non-null  float64\n",
      " 15  V15     284807 non-null  float64\n",
      " 16  V16     284807 non-null  float64\n",
      " 17  V17     284807 non-null  float64\n",
      " 18  V18     284807 non-null  float64\n",
      " 19  V19     284807 non-null  float64\n",
      " 20  V20     284807 non-null  float64\n",
      " 21  V21     284807 non-null  float64\n",
      " 22  V22     284807 non-null  float64\n",
      " 23  V23     284807 non-null  float64\n",
      " 24  V24     284807 non-null  float64\n",
      " 25  V25     284807 non-null  float64\n",
      " 26  V26     284807 non-null  float64\n",
      " 27  V27     284807 non-null  float64\n",
      " 28  V28     284807 non-null  float64\n",
      " 29  Amount  284807 non-null  float64\n",
      " 30  Class   284807 non-null  int64  \n",
      "dtypes: float64(30), int64(1)\n",
      "memory usage: 67.4 MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "25df8bf1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T01:31:49.608064Z",
     "iopub.status.busy": "2024-10-25T01:31:49.607548Z",
     "iopub.status.idle": "2024-10-25T01:31:49.616054Z",
     "shell.execute_reply": "2024-10-25T01:31:49.614796Z"
    },
    "papermill": {
     "duration": 0.024513,
     "end_time": "2024-10-25T01:31:49.618691",
     "exception": false,
     "start_time": "2024-10-25T01:31:49.594178",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(284807, 31)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a144ce86",
   "metadata": {
    "papermill": {
     "duration": 0.011509,
     "end_time": "2024-10-25T01:31:49.642353",
     "exception": false,
     "start_time": "2024-10-25T01:31:49.630844",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Cleaning data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "def53a38",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T01:31:49.668702Z",
     "iopub.status.busy": "2024-10-25T01:31:49.667676Z",
     "iopub.status.idle": "2024-10-25T01:31:49.694168Z",
     "shell.execute_reply": "2024-10-25T01:31:49.692820Z"
    },
    "papermill": {
     "duration": 0.042616,
     "end_time": "2024-10-25T01:31:49.697031",
     "exception": false,
     "start_time": "2024-10-25T01:31:49.654415",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking for missing or null values\n",
    "df.isna().sum().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b4ef67ef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T01:31:49.723930Z",
     "iopub.status.busy": "2024-10-25T01:31:49.722839Z",
     "iopub.status.idle": "2024-10-25T01:31:50.731743Z",
     "shell.execute_reply": "2024-10-25T01:31:50.730347Z"
    },
    "papermill": {
     "duration": 1.025277,
     "end_time": "2024-10-25T01:31:50.734677",
     "exception": false,
     "start_time": "2024-10-25T01:31:49.709400",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1081"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "# Check for duplicated\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "88a6d225",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T01:31:50.762347Z",
     "iopub.status.busy": "2024-10-25T01:31:50.761249Z",
     "iopub.status.idle": "2024-10-25T01:31:52.585366Z",
     "shell.execute_reply": "2024-10-25T01:31:52.583947Z"
    },
    "papermill": {
     "duration": 1.84117,
     "end_time": "2024-10-25T01:31:52.588557",
     "exception": false,
     "start_time": "2024-10-25T01:31:50.747387",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# drop duplicated row\n",
    "df.drop_duplicates(inplace = True)\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0a03be10",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T01:31:52.616649Z",
     "iopub.status.busy": "2024-10-25T01:31:52.616244Z",
     "iopub.status.idle": "2024-10-25T01:31:52.636004Z",
     "shell.execute_reply": "2024-10-25T01:31:52.634473Z"
    },
    "papermill": {
     "duration": 0.03675,
     "end_time": "2024-10-25T01:31:52.638832",
     "exception": false,
     "start_time": "2024-10-25T01:31:52.602082",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().values.any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f589ce63",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T01:31:52.666496Z",
     "iopub.status.busy": "2024-10-25T01:31:52.665975Z",
     "iopub.status.idle": "2024-10-25T01:32:10.453029Z",
     "shell.execute_reply": "2024-10-25T01:32:10.451748Z"
    },
    "papermill": {
     "duration": 17.804628,
     "end_time": "2024-10-25T01:32:10.456217",
     "exception": false,
     "start_time": "2024-10-25T01:31:52.651589",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import pickle\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy import stats\n",
    "import tensorflow as tf\n",
    "import seaborn as sns\n",
    "from pylab import rcParams\n",
    "from sklearn.model_selection import train_test_split\n",
    "from keras.models import Model, load_model\n",
    "from keras.layers import Input, Dense\n",
    "from keras.callbacks import ModelCheckpoint, TensorBoard\n",
    "from keras import regularizers\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.metrics import classification_report, accuracy_score, confusion_matrix\n",
    "from imblearn.over_sampling import SMOTE\n",
    "import xgboost as xgb\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report, confusion_matrix\n",
    "%matplotlib inline\n",
    "\n",
    "sns.set(style='whitegrid', palette='muted', font_scale=1.5)\n",
    "\n",
    "rcParams['figure.figsize'] = 14, 8\n",
    "\n",
    "RANDOM_SEED = 42\n",
    "LABELS = [\"Normal\", \"Fraud\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a0f5f4a7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T01:32:10.485173Z",
     "iopub.status.busy": "2024-10-25T01:32:10.483805Z",
     "iopub.status.idle": "2024-10-25T01:32:10.939703Z",
     "shell.execute_reply": "2024-10-25T01:32:10.938327Z"
    },
    "papermill": {
     "duration": 0.473644,
     "end_time": "2024-10-25T01:32:10.942664",
     "exception": false,
     "start_time": "2024-10-25T01:32:10.469020",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_17/2107955042.py:1: FutureWarning: pandas.value_counts is deprecated and will be removed in a future version. Use pd.Series(obj).value_counts() instead.\n",
      "  count_classes = pd.value_counts(df['Class'], sort = True)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1400x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "count_classes = pd.value_counts(df['Class'], sort = True)\n",
    "count_classes.plot(kind = 'bar', rot=0)\n",
    "plt.title(\"Transaction class distribution\")\n",
    "plt.xticks(range(2), LABELS)\n",
    "plt.xlabel(\"Class\")\n",
    "plt.ylabel(\"Frequency\");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c70b5ad",
   "metadata": {
    "papermill": {
     "duration": 0.013372,
     "end_time": "2024-10-25T01:32:10.969630",
     "exception": false,
     "start_time": "2024-10-25T01:32:10.956258",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We have a highly imbalanced dataset on our hands. Normal transactions overwhelm the fraudulent ones by a large margin. Let's look at the two types of transactions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "84187449",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T01:32:10.998884Z",
     "iopub.status.busy": "2024-10-25T01:32:10.997506Z",
     "iopub.status.idle": "2024-10-25T01:32:11.063658Z",
     "shell.execute_reply": "2024-10-25T01:32:11.062392Z"
    },
    "papermill": {
     "duration": 0.084551,
     "end_time": "2024-10-25T01:32:11.067442",
     "exception": false,
     "start_time": "2024-10-25T01:32:10.982891",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "frauds = df[df.Class == 1]\n",
    "normal = df[df.Class == 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "126f9517",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T01:32:11.099501Z",
     "iopub.status.busy": "2024-10-25T01:32:11.098990Z",
     "iopub.status.idle": "2024-10-25T01:32:11.107513Z",
     "shell.execute_reply": "2024-10-25T01:32:11.106013Z"
    },
    "papermill": {
     "duration": 0.02831,
     "end_time": "2024-10-25T01:32:11.110547",
     "exception": false,
     "start_time": "2024-10-25T01:32:11.082237",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(473, 31)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "frauds.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a3104e88",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T01:32:11.140294Z",
     "iopub.status.busy": "2024-10-25T01:32:11.139822Z",
     "iopub.status.idle": "2024-10-25T01:32:11.148486Z",
     "shell.execute_reply": "2024-10-25T01:32:11.146862Z"
    },
    "papermill": {
     "duration": 0.027215,
     "end_time": "2024-10-25T01:32:11.151452",
     "exception": false,
     "start_time": "2024-10-25T01:32:11.124237",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(283253, 31)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "normal.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "0145f340",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T01:32:11.181861Z",
     "iopub.status.busy": "2024-10-25T01:32:11.181284Z",
     "iopub.status.idle": "2024-10-25T01:32:12.536625Z",
     "shell.execute_reply": "2024-10-25T01:32:12.535392Z"
    },
    "papermill": {
     "duration": 1.374356,
     "end_time": "2024-10-25T01:32:12.539693",
     "exception": false,
     "start_time": "2024-10-25T01:32:11.165337",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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sXPnTrz44ov45Zdf0LdvX4wcORJxcXHIzc3FDz/8gAsXLiAjIwNvv/023n//fav7OnLkCB577DFUVVVBoVDgxhtvxI033ohmzZqhuroaR44cwfr161FVVYXXX38dAQEBLk1WsGzZMrz++uvGfw8dOhS33HILIiIikJmZidWrVyMnJwenT5/GhAkTsHbtWrNA33PPPYfi4mKcPn0aH374IQDgzjvvxKhRo0SlZ9KkSbj11luxaNEi7N+/HwDw5ptvIiYmxmy5li1bWl2/pqYGzzzzDP766y/069cPI0aMQLNmzVBUVIT8/Hyz5bRaLVq3bo2BAweiU6dOiI6Ohk6nw8WLF/H7779j3759qKysxKxZs/DDDz8gKSnJbtrLy8sxZcoUZGZmYvjw4RgyZAjUajVycnKwdOlS5Obm4sKFC3jxxRexZMkSi/UXL15sDJRFRETg7rvvRrdu3RAeHo6qqipcuHABx48fN54Xa8cu1TFlZmbiwQcfRHFxMYC62UzvvPNOdO3aFcHBwSgsLERqaip+/vlns/XuvPNOdOvWDZs2bTI+MD/33HNmLS8BCApkNfTBBx/g888/B1DX0unOO+9EcnIygoKCcPr0aaxatQr5+fk4cOAAHnnkEaxYsQKBgYE2t1dbW4tnn30Whw8fxg033IBbb70VcXFxuHz5MlauXIm//voLJSUlmDVrFjZu3Ciqe/GYMWOMgcT169dj5syZNpctLy83ns/OnTubPSRfvnzZLFB2yy23YNCgQWjWrBn0ej0KCgpw6tQp/P7772bBDVeYtoQzDdyNHTsWv/76q3GZ2bNnC9peWVkZnnrqKeTm5uLOO+/EoEGDEBoairS0NPzwww+orKzE6tWr0b9/f4SFheGNN95AbGws7r33XnTu3BnV1dXYunUr9uzZg9raWrz88svo27ev1RcPly5dwoQJE1BYWAgAaNu2LcaNG4e2bduipKQEu3btwi+//ILKykq89NJL8PPzw9133+3K6XLKL7/8gq1btyI8PBwTJ05Et27doFAo8Mcff2D16tXQaDRYs2YN+vfvj/vuu8+4XnJyMj755BOzCW0mTZpkMdlCUFCQS+m7cOECZs6cifLycowcORI33ngjgoOD8eeff2LFihUoKirCiRMnMHXqVPzwww/w97/2qJScnIx27dohMzMTGzduxIsvvojg4GCb+/rx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ANSNF9etWzcvp4iIiKTAAf6JiIiIiIicVFhYaJxAJikpiYEyIqJGhMEyIiIiIiIiJy1cuNDYRXTSpEleTg0REUmJY5YRERERERE5cPnyZfz555+4evUq9u7daxyrrH379hg1apSXU0dERFJisIyIiIiIiMiBlJQUvPzyy2afBQQE4O233/b4RDFEROReDJYRERERERE5IS4uDr169cKzzz7LscqIiBohzoZJRERERERERERUjwP8ExERERERERER1WOwjIiIiIiIiIiIqB6DZURERERERERERPUYLCMiIiIiIiIiIqrHYBkREREREREREVE9BsuIiIiIiIiIiIjqMVhGRERERERERERUj8EyIiIiIiIiIiKiegyWERERERERERER1WOwjIiIiIiIiIiIqB6DZURERERERERERPUYLCMiIiIiIiIiIqrHYBkREREREREREVE9BsuIiIiIiIiIiIjqMVhGRERERERERERUj8EyIiIiIiIiIiKiegyWERERERERERER1WOwjIiIiIiIiIiIqB6DZURERERERERERPUYLCMiIiIiIiIiIqrHYBkREREREREREVE9BsuIiIiIiIiIiIjqMVhGRERERERERERUj8EyIiIiImqUPv74Y3Tp0gWTJk3ydlKIiIjIh/h7OwFERERE5F4ff/wx5s+fL2jZP//8082pISIiIpI3BsuIiIiImpDY2FhvJ4GIiIhI1hgsIyIiImpCUlJSvJ0EIiIiIlnjmGVERERERERERET12LKMiIiIiIxycnIwfPhwAMDOnTuh0+nwxRdfICUlBVeuXEGzZs2wa9cuAEBJSQm2bduG3377DRkZGbh8+TKqqqoQGxuLvn37YtKkSejdu7fV/bz00ktYs2YNxo0bh7lz51pdZvXq1Xj55ZfRqlUr4z4b2rNnD7799lucOHECWq0WrVu3xl133YVHH33U5XNBRERETRODZURERERk1ZEjR/Daa6+hsrISwcHBUKlUZt8vWrTIOHGAUqlEWFgYACA3Nxe5ubnYtGkTXnnlFTzyyCNuSV/DiQsiIiJw9uxZvP/++9izZw/69u3rlv0SERFR48ZgGRERERFZ9dprr6FTp0549dVX0atXLwBAZmam8ftmzZrh73//O4YOHYrOnTsjICAAer0eOTk5WLRoERYvXoy5c+eif//+6N69u6Rp27lzpzFQNnLkSLz00kto2bIlrl69ilWrVuGdd97hzJ5EREQkCoNlRERERE3I4MGDbX737bffIjg42PjvqKgofPPNNwgNDTV+1q5dO+Pf48ePt9iGQqFA69at8c9//hNarRZLlizBkiVL8J///EeiI6jzf//3fwCAAQMG4L///S/8/OqG4g0KCsLEiROhVCrx+uuvS7pPIiIiaho4wD8RERFRE5Kfn2/zv9raWrNlJ06caBYoc9bNN98MADh06JBLaW7o1KlTOHPmDABg+vTpxkCZqQceeADNmzeXdL9ERETUNLBlGREREVET4qhrYk5OjvFvIWN+nT9/Hj/88AP279+P7OxsVFRUQKfTmS1z+fJlcYm1ITU1FQDg7++P/v37W13Gz88PAwYMwIYNGyTdNxERETV+DJYRERERkVUxMTF2v9++fTtmzZqFmpoa42dhYWEIDAyEQqGARqNBSUkJKisrJU1XYWEhgLpuogEBATaXa9GihaT7JSIioqaBwTIiIiIisspa90aDoqIivPTSS6ipqUFycjKefvppJCUlISgoyLjM3r178eijj3ogpURERETSYbCMiIiIiJy2Z88elJeXQ61WY8GCBWYTAxjk5eXZXF+pVAIAqqurbS5TVlZm9fPo6GgAdQG7mpoam63LpO7+SURERE0DB/gnIiIiIqddunQJQN3smNYCZUBdyzJbIiIiAAAXL160uczx48etft6zZ08AQG1trc3JA3Q6HQ4cOGBz20RERES2MFhGRERERE4LDw8HAGRlZVltHZaenm53cP2uXbsCqBus31rA7OzZs9i2bZvNdTt06AAA+OyzzywmFACAVatWGQN6RERERM5gsIyIiIiInDZ48GD4+fmhuLgY//jHP4xdHmtqavDTTz9h8uTJCA0Ntbn+sGHDEBISAo1GgxkzZiAjIwMAoNFosGPHDjz66KMICQmxuf7MmTMBAPv378fs2bONgbHq6mosXboUb775prH1GhEREZEzGCwjIiIiIqclJibi8ccfBwBs27YNN910E/r374++ffti5syZCAkJwZw5c2yuHx4ejldeeQUKhQJHjx7FHXfcgb59+6JPnz54+umnER8fj2effdbm+rfddhumTZsGAPjpp59w8803Y8CAAejbty/eeOMNJCUl4aGHHpL2oImIiKhJYLCMiIiIiET5xz/+gXnz5hlnwaytrUWbNm0wbdo0rF27Fs2aNbO7/v3334+FCxciOTkZYWFh0Gq1aNeuHWbPno3FixfbHAvNYObMmWbr19TUoH379pg9eza+/fZbqFQqKQ+XiIiImgiFXq/XezsRREREREREREREcsCWZURERERERERERPUYLCMiIiIiIiIiIqrHYBkREREREREREVE9BsuIiIiIiIiIiIjqMVhGRERERERERERUz9/bCSDPO3LkCPR6PadTJyIiIiIiIqJGRaPRQKFQoE+fPqK3wZZlTZBer4der/d2Mlyi1+tRU1Pj88dBnse8Q2Iw35BYzDskFvMOicF8Q2Ix75BYcsw7UsQ82LKsCTK0KOvVq5eXUyJeZWUl0tPT0bFjR4SEhHg7OeRDmHdIDOYbEot5h8Ri3iExmG9ILOYdEkuOeefEiRMub4Mty4iIiIiIiIiIiOoxWEZERERERERERFSPwTIiIiIiIiIiIqJ6DJYRERERERERERHVY7CMiIiIiIiIiIioHoNlRERERERERERE9fy9nQAiIiIiIiK6RqvTIy2rAoWlGkRHqNAjMRRKP4W3k0VE1GQwWEZERERERCQTKanFWLAxF/klGuNnsWoVpo2Ox+Cekd5LGBFRE8JumERERERERDKQklqMt5acMwuUAUB+iQZvLTmHlNRi7ySMiKiJYbCMiIiIiIjIy7Q6PRZszLW7zMKNudDq9B5KERFR08VgGRERERERkZelZVVYtChrKK9Eg7SsCg+liIio6WKwjIiIiIiIyMsKS+0HypxdjoiIxGOwjIiIiIiIyMuiI1SSLkdEROIxWEZERERERORlPRJDEau2HwiLU6vQIzHUQykiImq6GCwjIiIiIiLyMqWfAtNGx9tdZuroeCj9FB5KERFR08VgGRERERERkQwM7hmJORPbWrQwi1OrMGdiWwzuGemdhBERNTH+3k4AERERERER1RncMxLJ3dVIy6pAYakG0RF1XS/ZooyIyHMYLCMiIiIiIpIRpZ8CSe3DvJ0MIqImi90wiYiIiIiIiIiI6jX6lmV6vR5HjhzBrl27cOjQIWRkZKC8vBzh4eHo3r07xo4di7vuugsKhfVmzRUVFfj888+xdetW5ObmIiQkBNdddx0mT56MG264we6+9+3bh2+++QbHjh1DZWUl4uPjMXLkSEyZMgUhISE213Nln0REREREREREJF6jb1m2b98+PPTQQ/jiiy9w+PBhhIeHo0uXLtDr9UhJScHzzz+PadOmoaamxmLdwsJC3HvvvViwYAEuXLiADh06IDAwELt378bf/vY3LFmyxOZ+Fy9ejEcffRS7d+9GYGAgOnTogAsXLuCzzz7Dfffdh+LiYqvrubJPIiIiIiIiIiJyTaMPlun1eiQkJOCf//wnfv/9d+zYsQOrV6/G/v37MW/ePAQEBGD37t348MMPLdb95z//iczMTPTo0QM7duzAmjVrsHv3brz55pvQ6/X4z3/+g/T0dIv1UlNT8fbbbwMA3nzzTezevRtr1qzBjh070KNHD5w9exavvvqq1fSK3ScREREREREREbmu0QfLkpKSsGXLFjzyyCOIiYkx+27s2LF4+umnAQArV66ETqczfnfy5Ens2rULfn5++O9//4vmzZsDABQKBcaPH48xY8ZAq9Xi008/tdjnp59+Cp1OhzFjxmD8+PHGLp7NmzfH//3f/8HPzw/btm3DqVOnzNZzZZ9EREREREREROS6Rh8sCwsLg0qlsvn9TTfdBAAoLi5GYWGh8fOtW7cCAJKTk9G2bVuL9caPHw8A2LNnDyorK42fV1RU4NdffwUAPPDAAxbrJSYmIjk5GQCwZcsWs+/E7pOIiIiIiIiIiKTR6INljly9etX4d1BQkPHvo0ePAgD69+9vdb2kpCQEBASgurrarFtkeno6ampqEBAQgKSkJKvr9uvXDwBw7Ngxs8/F7pOIiIiIiIiIiKTR6GfDdGTTpk0AgK5duyIsLMz4eVZWFgCgTZs2VtdTqVRo2bIlzp07h8zMTGMALDMzEwAQHx9vs0WbYZuGZV3dpxh6vd6nW6dVVVWZ/Z9IKOYdEoP5hsRi3iGxmHdIDOYbEot5h8SSY97R6/XG4bDEatLBstTUVCxbtgwAMGXKFLPvSkpKAABqtdrm+obvSktLRa1nWNbVfYqh0WgaRes0Q4CRyFnMOyQG8w2JxbxDYjHvkBjMNyQW8w6JJbe8ExAQ4NL6TTZYlp+fj2eeeQa1tbW47bbbMGrUKLPvq6urAcDueGeGk2/aldOZ9QzLurpPMVQqFTp27OjSNrypqqoKWVlZSExMRHBwsLeTQz6EeYfEYL4hsZh3SCzmHRKD+YbEYt4hseSYd86cOePyNppksKysrAxPPvkkcnNz0aNHD8ydO9dimcDAQFRVVUGj0djcTk1NDQDzsc4CAwMBQNB6hmVd3acYCoUCISEhLm1DDoKDgxvFcZDnMe+QGMw3JBbzDonFvENiMN+QWMw7JJac8o6rXTCBJjjAf0VFBZ544gmcPHkSnTp1wldffWU2VplBREQEAMuukqYM3xmWBWx3sbS2XsPulmL3SURERERERERE0mhSwbKqqipMnToVR48eRWJiIr755htERUVZXTYxMREAcO7cOavfazQa5Obmmi1r+ndubq7NFmLZ2dkW67myTyIiIiIiIiIikkaTCZZVV1dj+vTpOHjwIFq1aoVvv/0WcXFxNpfv3bs3AODQoUNWvz9+/Dg0Gg0CAwPRrVs34+fdunWDSqVCTU0Njh8/bnVdwzYN+3B1n0REREREREREJI0mESzTaDR45plnsHfvXjRv3hzfffcdWrZsaXed22+/HQCwf/9+qy29li9fDgC46aabEBoaavw8LCwMN954IwDgxx9/tFgvKysL+/btAwCMHDlSkn0SEREREREREZE0Gn2wTKvVYvbs2dizZw/i4uLw3XffoXXr1g7X69GjB4YOHQqtVouZM2fiypUrAAC9Xo/ly5dj3bp18PPzw/Tp0y3Wfeqpp6BQKLBu3TosX74cer0eAHDlyhXMmjULOp0Ot956K7p27SrZPomIiIiIiIiIyHWNfjbMzZs3Y+vWrQCAgIAAvPLKKzaXffXVV9G9e3fjv99++2089NBDSEtLw/Dhw9GxY0cUFRXh4sWLUCgUeOWVV9CjRw+L7SQlJeGll17C3Llz8dprr+Gzzz5DVFQUzpw5g5qaGrRr1w7//ve/raZB7D6JiIiIiIiIiMh1jT5YVlNTY/z7woULuHDhgs1ly8rKzP4dHR2NVatW4YsvvsCWLVtw5swZhISE4KabbsLjjz+O5ORkm9t69NFH0aVLF3z99dc4fvw4CgoKEB8fj5EjR2LKlCk2u1G6sk8iIiIiIiIiInJNow+W3XPPPbjnnntErx8WFoaZM2di5syZTq87cOBADBw40KP7JCIiIiIiIiIi8Rr9mGVERERERERERERCMVhGRERERERERERUj8EyIiIiIiIiIiKiegyWERERERERERER1WOwjIiIiIiIiIiIqB6DZURERERERERERPUYLCMiIiIiIiIiIqrn7+0EEDV1Wp0eaVkVKCzVIDpChR6JoVD6KbydLCIiIiIiIqImicEyIi9KSS3Ggo25yC/RGD+LVaswbXQ8BveM9F7CiIiIiIiIiJoodsMk8pKU1GK8teScWaAMAPJLNHhryTmkpBZ7J2FERERERERETRiDZUReoNXpsWBjrt1lFm7MhVan91CKiIiIiIiIiAhgsIzIK9KyKixalDWUV6JBWlaFh1JERERERERERACDZUReUVhqP1Dm7HJEREREREREJA0Gy4i8IDpCJelyRERERERERCQNBsuIvKBHYihi1fYDYXFqFXokhnooRUREREREREQEMFhG5BVKPwWmjY63u8zU0fFQ+ik8lCIiIiIiIiIiAhgsI/KawT0jMWdiW4sWZnFqFeZMbIvBPSO9kzAiIiIiIiKiJszf2wkgasoG94xEcnc10rIqUFiqQXREXddLtigjIiIiIiIi8g4Gy4i8TOmnQFL7MG8ng4iIiIiIiIjAbphERERERERERERGDJYRERERERERERHVY7CMiIiIiIiIiIioHoNlRERERERERERE9RgsIyIiIiIiIiIiqsdgGRERERERERERUT0Gy4iIiIiIiIiIiOoxWEZERERERERERFSPwTIiIiIiIiIiIqJ6DJYRERERERERERHVY7CMiIiIiIiIiIioHoNlRERERERERERE9RgsIyIiIiIiIiIiqsdgGRERERERERERUT0Gy4iIiIiIiIiIiOoxWEZERERERERERFSPwTIiIiIiIiIiIqJ6DJYRERERERERERHVY7CMiIiIiIiIiIioHoNlRERERERERERE9RgsIyIiIiIiIiIiqsdgGRERERERERERUT0Gy4iIiIiIiIiIiOr5ezsBnpCXl4eUlBSkpqbixIkTSE9PR3V1NQYMGIDFixfbXG/YsGG4cOGC3W0fP34cgYGBVr87f/48Pv30U6SkpKCwsBAxMTEYPHgwpk+fjtatW9vcpl6vx8qVK7FixQqcOXMGANCxY0fcf//9uO+++6BQKAQcNREREREREREROatJBMs2bdqEd955R/T6nTt3RlhYmNXvbAWujhw5gsmTJ6OyshJqtRqdO3fG+fPnsWrVKmzZsgXffvstkpKSLNbT6XSYOXMmtmzZAqAuSAYAx44dw7Fjx7B371588MEHDJgRERERERGR7Gl1eqRlVaCwVIPoCBV6JIZC6cfnWZK3JhEsCwsLw6BBg9CrVy/06tULJ0+exKeffip4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IiIiIiIiIqJGDJYRERERUYtVUFCAlJQUpKSkoKCgwNOnQ0RERF6AwTIiIiIiH/TBBx8YgjzXXXcdiouLLe7bNCB04MABN54lERERke9hsIyIiIjIx129ehX//e9/PX0aRERERH6BwTIiIiIiP7B+/XqcPXvW06dBRERE5PMYLCMiIiLyYe3atUNKSgrq6+vx7rvvevp0iIiIiHweg2VEREREPiwgIADz5s0DAOzYsQPHjx+3+xharRbr1q3D/fffjxtuuAFpaWkYPHgwHnnkEatznE2ePBkpKSn44IMPoNFosHTpUowdOxZ9+/Y1mh9t6NChSElJwYYNG1BbW4sPPvgAf/vb33DdddfhpptuwpNPPonz588bjltWVoa33noLI0aMQHp6OgYNGoT58+ejpKTE7HloNBr88MMPeP755zF27FjcdNNNSEtLw8CBAzFt2jRs3boVgiDY/b0QERFRyxTo6RMgIiIiIsf85S9/Qf/+/XHw4EG8/fbb+Oyzz0Snraqqwpw5c3Dw4EEAgFwuR3h4OC5fvowdO3Zgx44dmDp1Kp5++mmLx6irq8PkyZNx7NgxBAYGIjw8HDKZzGxe99xzD3777TcEBwdDJpPh8uXL2LJlC/bt24fVq1dDEARMmTIFBQUFCA0NhU6nQ0lJCdatW4fDhw9j/fr1iIiIMDru0aNHMWfOHMO/IyIiEBQUhLKyMvz000/46aef8P333+Pdd99FQADbiomIiMg61haIiIiI/IC+d9mBAwfwv//9T3S6+fPn4+DBg1AoFHjuuedw5MgRHDp0CHv37sVdd90FAFi6dClWrVpl8RhffPEFfv31V7z22ms4cuQIDh48iH379iElJcVovw8//BA1NTVYunQpsrKycPToUSxduhTR0dG4fPky3n77bcydOxetWrXCmjVrkJWVhWPHjuHdd99FaGgo8vLysGTJEpP8Q0NDMX78eCxbtgxHjhzBkSNHcPToURw4cADz589HREQEtm/fjs8//1z090JEREQtF4NlRERERH6gV69e+Otf/woA+M9//iNq2OEvv/yCHTt2AACef/55TJ48GaGhoQCAuLg4vPrqqxgxYgQAYMGCBairqzN7HJVKhXfeeQdjx45FSEgIAKB169aIiooy2k+tVmPZsmUYNGgQAgICIJfLMWjQIEOg79tvv0VhYSGWLVuGXr16AQAU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j3D48GH89ttvaNOmDcaOHYs5c+YgJibGbLqQkBB89tlnWL58Ob7++mvk5eVBoVCgf//+mDRpkmG4pTPzJCIiIiIiIiIix/lEsGzs2LEYO3as3ekGDx6MwYMHO5R3jx498P7779udLigoCDNnzsTMmTPdlicRERERERERETnGJ+YsIyIiIiIiIiIicgcGy4iIiIiIiIiIiBoxWEZERERERERERNSIwTIiIiIiIiIiIqJGDJYRERERERERERE1YrCMiIiIiIiIiIioEYNlREREREREREREjRgsIyIiIiIiIiIiasRgGRERERERERERUSMGy4iIiIiIiIiIiBoxWEZERERERERERNSIwTIiIiIiIiIiIqJGDJYRERERERERERE1YrCMiIiIiIiIiIioEYNlREREREREREREjRgsIyIiIiIiIiIiasRgGRERERERERERUSMGy4iIiIiIiIiIiBoxWEZERERERERERNSIwTIiIiIiIiIiIqJGDJYRERERERERERE1YrCMiIiIiIiIiIioEYNlREREREREREREjRgsIyIiIiIiIiIiasRgGRERERERERERUSMGy4iIiIiIiIiIiBoxWEZERERERERERNSIwTIiIiIiIiIiIqJGDJYRERERERERERE1YrCMiIiIiIiIiIioEYNlREREREREREREjQI9fQJiCIKAY8eOYdeuXThy5AjOnDmD6upqtGrVCqmpqRg9ejRuv/12yGQys+lramrw8ccfY8eOHSgsLERYWBiuu+46TJ06FTfccIPVvPfv349ly5bhl19+gUqlQkJCAjIyMjBz5kyEhYVZTOeJPImIiIiIiIiIyDE+0bNs//79mDBhApYsWYKjR4+iVatWSElJgSAIyMzMxJNPPonZs2dDrVabpC0rK8Ndd92FxYsX48KFC7j22msRHByMPXv24O9//zu++OILi/muXLkSU6ZMwZ49exAcHIxrr70WFy5cwKJFizBu3DiUl5ebTeeJPImIiIiIiIiIyHE+ESwTBAGJiYmYP38+fv75Z+zcuRMbNmzAgQMH8MYbbyAoKAh79uzBggULTNLOnz8fZ8+eRY8ePbBz505s3LgRe/bswb///W8IgoBXXnkFubm5Jumys7Px6quvAgD+/e9/Y8+ePdi4cSN27tyJHj164I8//sDzzz9v9nw9kScRERERERERETnOJ4Jl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lXPt3Y+IiIh8A4NlRERERERm9EgKR6zSeiAsTtkw3yERERH5DwbLiIiIiIjMkAfIMHtUgtV9Zo1K4OT+REREfobBMiIiIiIiCwalReG5iZ1MepjFKRV4bmInDEqL8syJERERkcv4xGqYRERERESeMigtCgNSlcjJq0FZpQbRkQ1DL9mjjIiIyD8xWEZEREREZIM8QIb0zhGePg0iIiJyAw7DJCIiIiIiIiIiasRgGRERERERERERUSMGy4iIiIiIiIiIiBoxWEZERERERERERNSIwTIiIiIiIiIiIqJGDJYRERERERERERE1YrCMiIiIiIiIiIiokeRg2bPPPovXXntN9P5vvvkm/vGPf0jNjoiIiIiIiIiIyOUkB8s2btyIbdu2id5/+/bt2Lhxo9TsiIiIiIiIiIiIXI7DMImIiIiIiIiIiBq5LVh25coVhISEuCs7IiIiIiIiIiIiuwW6OoOqqiqsXbsWtbW1SElJcXV2REREREREREREkokOln344Yf473//a/RZaWkpunfvLiq9TCbDrbfeat/ZERERERERERERuZFdPcsEQTD8LJPJjP5tjUKhwJ133omZM2fad3ZERERERERERERuJDpYNmbMGPTv3x9AQ9Ds73//O5RKJT744AOLaQICAhAREYGkpCTOV0ZERERERERERF5PdLCsffv2aN++veHfCQkJiImJMQTQiIiIiIiIiIiIfJ3kCf537drlzPMgIiIiIiIiIiLyuABPnwAREREREREREZG3kNyzrKni4mL89ttvqKioQH19vdV9R48e7YwsiYiIiIiIiIiInM6hYNmvv/6Kl19+GYcPHxa1v0wmY7CMiIiIiIiIiIi8luRg2ZkzZzBx4kTU1NRAEAQoFApER0dDLpc78/yIiIiIiIiIiIjcRnKw7MMPP0R1dTXatGmDF198ETfffDMDZURERERERERE5NMkB8sOHDgAmUyGN954AwMHDnTmOREREREREREREXmE5NUwq6qqEBQUhBtuuMGZ50NEREREREREROQxkoNlcXFxCAgIQECA5EMQERERERERERF5FcnDMIcMGYIvvvgCJ0+eRGpqqjPPyazLly8jMzMT2dnZOHHiBHJzc1FXV4f+/ftj5cqVFtMNHToUFy5csHrs48ePIzg42Oy28+fPY+HChcjMzERZWRliYmIwaNAgPPjgg+jQ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WBg++OADs0ujTpkyBceOHcN3332He++9F126dAHw5/KlGRkZmDx5slPzJCIiIiIiIiIix7klWFZXV4fq6mqTnlT20Gq1KC8vN/m8vr7e6POrV68afh45ciQA4Pjx4ygsLMSpU6cgl8uRmJiI/v3747777kP37t0t5tmnTx9s3rwZCxcuRGZmJn777Te0bt0aY8eOxZw5c9ChQwez6QICAvD+++/jq6++wtq1a/HHH38AaJhr7J577sHdd99tcSVRqXkSEREREREREZHj3BIsW79+PXQ6ndkVHsVKTEzEr7/+aleaXr16GSbcl6pjx454/fXX7U4nk8kwfvx4jB8/3m15EhERERERERGRYyQHywoLC61ur6urw8WLF7Fjxw6sX78eMpkMw4cPl5odERERERERERGRy0kOlg0bNkz0voIgoGvXrpgzZ47U7IiIiIiIiIiIiFxOcrBMEARR+3Xs2BEjR47EjBkzEBYWJjU7IiIiIiIiIiIil5McLPvhhx+sHzgwEJGRkVy5kYiIiIiIiIiIfIbkYFn79u2deR5EREREREREREQe55bVMImIiCzR6gTk5NWgrFKD6EgFeiSFQx4g8/RpERERERFRC+W0YFl1dTVOnjyJ0tJSAEBMTAxSU1MRERHhrCyIiMjPZGaXY/HWQpRUaAyfxSoVmD0qAYPSojx3YkRERERE1GI5HCz79ddf8e6772Lv3r3Q6XRG2wICAvCXv/wFjz76KFJSUhzNioiI/Ehmdjle/uKcyeclFRq8/MU5PDcRDJgREREREZHbBTiS+LvvvsM999yDH3/8EVqtFoIgGP2n1Wqxe/du3HPPPfj++++ddc5EROTjtDoBi7cWWt3no62F0OrErbxMRERERETkLJJ7lp0/fx5PPPEE1Go12rdvj+nTp2PQoEFo27YtAODixYvIzMzEp59+ioKCAjzxxBPYunUrOnTo4LSTJyIi35STV2M09NKcyxUa5OTVIL0zh/MTEREREZH7SO5Z9umnn0KtVqNXr17YsmULJkyYgI4dOyIoKAhBQUHo2LEjJkyYgC1btqBXr15Qq9VYtmyZM8+diIh8VFml9UCZvfsRERERERE5i+Rg2b59+yCTyfDiiy8iPDzc4n5hYWF48cUXIQgCMjMzpWZHRER+JDpS4dT9iIiIiIiInEVysOzixYsIDw8XNXF/SkoKIiIi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8/OjpKQEBwcHvLy8cHR05MyZM+b8l127dmX58uVWJ6q89dZbfPzxxwB4eXnh5OTE0aNHqa6uZsCAAURHR1vc2T03N5enn36awsJCnJyc6NmzJ6dOnaKwsBB7e3siIyN54IEHmrXNxihYJj8r+/bt46OPPiIzM5Py8nK6detGQEAAoaGhODs7t3T3pBHr1q0jPDz8qs6NjY01L5PatWsX27Zt49ChQ5w5c4bz589jb2+Pp6cnQ4YMYeLEiXh5eTVa39dff83y5ctJTU2luLiYzp07M3LkSKZOnUrHjh2tlrt06RIxMTFs3LiR7777Dnt7e/r27cvEiRPNU4Wbu01pqLi4mFWrVpGRkUFOTg7nzp3j0qVLtG/fnn79+hEYGEhgYKDVfEwt8Trq3rm5NOU/iRkZGWzatInMzExOnjzJ+fPnsbOzo0uXLgwcOJCnnnqKvn37NlrHd999xz//+U/27NlDUVERbm5uDBs2jKlTpzYaqKupqWHNmjWsXbuWnJwcAHr37s0TTzzB448/3uiMuGttszXLz8+/qiUZYWFhTJ8+vd5zreV95XravFVdy30zadIkkpOTf7RM9+7d682KqKysJDY2loyMDLKzszl37hzl5eW4uLjg7e3N73//ex577LFGvwC2xPvK9bR5K7uWe6e1fSbp3rHsej6vysrKGDZsGOXl5URERFxVcv/4+HhSU1M5fPgwhYWFlJaW4uTkRO/evfH392fChAk/urPkli1biIuL4/Dhw1RWVuLl5UVQUBDBwcGNblR19uxZli1bxo4dOzhz5gyurq74+fkxZcoU82SK5m7TGgXLRERERERERERE6rS+OYwiIiIiIiIiIiJWKFgmIiIiIiIiIiJSR8EyERERERERERGROgqWiYiIiIiIiIiI1FGwTEREREREREREpI6CZSIiIiIiIiIiInUULBMREREREREREamjYJmIiIiIiIiIiEgdBctERERERERERETqKFgmIiIiIiIiIiJSR8EyERERaRW8vb3x9vYmKSmppbtyw+Tk5ODr60tgYCBGo7HesSVLluDt7c2kSZNaqHfSnJr79Zw/fz7e3t6sXbu2WeoTERH5OTO0dAdEREREfoy3t/c1l42IiGDcuHHN2Jub19///neqqqqYNm0atrY312+iNTU1JCQk8Pnnn5OVlUVhYSF2dnZ07NiR2267jf79++Pn58eQIUNwcXFp6e62OlOmTGHdunW8++67BAYG4ujo2NJdEhERaTEKlomIiMhNr1OnThafLy8vp7y8vNFzHBwcAOjZsyfALRsE2L9/Pzt27OBXv/oVAQEBDY67ubnRs2dPPDw8fvK+FRcXM23aNJKTk83PGQwGHB0dKSgoIC8vj/T0dGJiYlpVcPNm0q1bN8aNG8fq1atZsWIFYWFhLd0lERGRFqNgmYiIiNz09uzZY/H5JUuWsHTp0kbPMUlISGj2ft1MPvjgAwAmTJiAjY1Ng+MTJ05k4sSJP3W3AHjppZdITk7Gzs6OZ555hvHjx+Pl5YWtrS1VVVUcO3aMXbt28fnnn7dI/6TWk08+yerVq1m5ciWhoaG0adOmpbskIiLSIhQsExEREfmZy8vLY8+ePdjb2/PQQw+1dHfq+fbbb9mxYwcAM2fOJDQ0tN5xg8GAj48PPj4+hISEUFFR0RLdFKBv37706dOHo0ePkpCQQFBQUEt3SUREpEUoWCYiIiKtginvWWxsLIMGDTI/n5+fz3333QdAYmIiNjY2LFu2jN27d1NYWEiXLl0YNWoUf/zjH3FycgIgOzubqKgoUlJSOHfuHB4eHowZM4aQkBDs7e2t9iE/P5+PP/6YvXv3cvLkSYxGIx4eHgwbNozJkyfTrVu3a7q2Tz75hJqaGoYOHYq7u7vFc0yz8AYOHMjKlSvrHZs7dy7r169n7NixLFy4kISEBFatWsU333zDxYsX+eUvf8m4ceOYNGlSk3OhHT582PzYNM6NMS2btSQ7O5uVK1eSlJTE6dOnsbW1xdPTE39/f5555hmr1w61S3ZXr15NYmIiR48epaysDHd3d7y8vPD39ycoKMjiUt6kpCRWrVrFgQMHKCoqwtnZGR8fH4KCghgzZgx2dnYNylw51vv27SM6OprMzEzKysrw9PRk1KhRhISE0LZtW6t93rlzJzExMXz11VdUV1fTo0cPRo8eTXBwcOODCGzevJl169aRlZXFhQsXcHR0xN3dnV69ejF8+HAee+wxi20HBgYSGRnJmjVrFCwTEZFWS8EyERERkTpZWVnMmzeP4uJiXFxcqK6uJi8vj/fff5/U1FRiYmLYs2cPM2fO5IcffqBdu3ZUVlZy4sQJFi9ezNGjR4mMjLRY92effca8efO4dOkSAG3atMHW1pbc3Fxyc3PNydWHDRvW5H7v2rULAD8/v2u/+DoLFixg1apV2Nra4uLiQkVFBUeOHOGtt94iKyuLt99++5rrPnXqFL17976msh988AGLFi0y7/Lp6OhIZWUl2dnZZGdn8+mnnxIVFUW/fv0alP3666+ZNm0aBQUFANja2uLq6kpRURGnT58mJSUFW1vbBkGoiIgIYmJiALCxsaFdu3aUlJSwf/9+9u/fz2effcZ7773X6IYEH374Ie+88w6A+X45fvw4S5YsITk5mejo6EYDbiaurq7k5OTwzjvvsHPnTu6++26rbYaHh7Nu3Trz305OTlRVVXHixAlOnDjBjh07+N3vfoenp2eDsqZ7KD09ndLSUm22ICIirdLNtU2SiIiISAuaN28evr6+bNq0ibS0NNLT03nllVews7MjNTWV9957jxdffJGRI0eyfft2UlNTSUtLY8qUKUDtbJ69e/c2qHfPnj28/PLLGI1Gnn/+eRITE8nMzCQjI4MtW7YQEBBAWVkZM2bM4OTJk03qc2lpKUeOHAHgzjvvvK7r3759O2vWrCE8PJyUlBRSUlLYv38/jz/+OAAbNmxg3759TarzzjvvNOdQW7hwIbm5uU3u19q1a3nnnXdwcHBg1qxZ7N69m4yMDA4ePMinn37K4MGD+f7773nhhRcoKyurV7agoIDnnnuOgoICPDw8iIyMJD09naSkJDIzM9m0aRPTp09vMCvtX//6lzlQNn78eHbt2kVKSgqpqamEh4djMBjYv38/r776qtV+HzlyhH/84x+Ehoayd+9ec/lp06YBtbPW1q9f36BcYmKiOVAWEBDAF198QUpKCmlpacyfP5+MjAzi4+Mttpmamsq6deuwtbXlxRdfJCkpiQMHDpCRkcH+/ftZsWIFY8eOtToD8o477sBgMFBdXU16errVaxMREbmVKVgmIiIiUqdLly5ERUVx++23A7VLAidNmkRgYCAAy5Yto3///ixatIju3bsD4OzszKxZs8wzcjZt2lSvTqPRyIIFCzAajcyfP58///nPeHp6YmNjg42NDb169WLx4sX4+/tTWlpKdHR0k/psWqIH4OPjc13Xf+HCBRYsWEBwcLB5RpGbmxtvvPEGvr6+Fq/vx3h6epqDbdnZ2Tz00EOMHTuW119/nU8++YTs7Gxqamqsli8tLeVvf/sbAO+++y5TpkzhtttuA8DOzo477riDFStW4Ovr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7tixY6moqODNN9/kyy+/5Msvv6RNmzY4OTlRVlZWL/B45bV37dqVFStW8MILL1BQUMCsWbOws7OjXbt2/PDDD+Y8b+Hh4fXKTZw4kby8PGJiYli9ejVr1qzB1dWVsrIy8w6WgwYN4q9//WvzDVadBx54gClTpvD++++zefNmNm/eTPv27c1t+/n5MWDAAJYvX96gbFVVFQkJCSQkJAC1y1sNBkO9GXcDBgxgypQpFtvevn070Lyz5URERH5uFCwTERER+Qncf//9bNu2jbi4OL788ktOnDhBSUkJjo6O9OrVizvvvJMRI0Zw7733NrnuESNG0LlzZwoKCkhOTmbQoEE34AquzfDhw9m6dSs7d+4kLS2No0ePcurUKYqLi3F0dKRz58707duXBx98kICAgAaBMpMnn3yS4cOHs2rVKvbu3Ut+fj4lJSW4uLjQo0cP7rrrLvz9/Rk8eHCDsr6+vmzevJm4uDgSExM5fvw4ZWVldOrUiR49enDfffcxevToBuXCw8MZOXIkcXFxpKenc/78eZydnfHx8eGRRx5hzJgx2NnZNfuYQe3ssrvuuovo6GgOHTrEpUuX6NWrF6NHj+bZZ5/l/ffft1hu6tSp+Pr6kpSURE5ODmfPnqW8vJyOHTvi4+PDqFGjrPa7rKyMxMREAMaPH39DrktEROTnwKamscQPIiIiIvKzsHTpUpYsWcK4cePMSwRFmmLDhg28/PLLDBo0iNjY2JbujoiISItRzjIRERGRW0BwcDDu7u5s3LjRavJ3EWuMRiMffvghALNnz27h3oiIiLQsBctEREREbgEuLi6EhYVRWVlpdYmeiDUJCQkcPXqUgIAAfvOb37R0d0RERFqUcpaJiIiI3CLGjx9PcXExtra2GI1Gq/m/RK5UWVlJWFgY48aNa+muiIiItDjlLBMREREREREREamjnxtFRERERERERETqKFgmIiIiIiIiIiJSR8EyERERERERERGROgqWiYiIiIiIiIiI1FGwTEREREREREREpI6CZSIiIiIiIiIiInUULBMREREREREREamjYJmIiIiIiIiIiEgdBctERERERERERETq/B/g9Ir4VB0VugAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 1400x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "f, (ax1, ax2) = plt.subplots(2, 1, sharex=True)\n",
    "f.suptitle('Time of transaction vs Amount by class')\n",
    "\n",
    "ax1.scatter(frauds.Time, frauds.Amount)\n",
    "ax1.set_title('Fraud')\n",
    "\n",
    "ax2.scatter(normal.Time, normal.Amount)\n",
    "ax2.set_title('Normal')\n",
    "\n",
    "plt.xlabel('Time (in Seconds)')\n",
    "plt.ylabel('Amount')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5f42fb4",
   "metadata": {
    "papermill": {
     "duration": 0.014986,
     "end_time": "2024-10-25T01:32:12.571484",
     "exception": false,
     "start_time": "2024-10-25T01:32:12.556498",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Doesn't seem like the time of transaction really matters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d909bd8d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T01:32:12.604644Z",
     "iopub.status.busy": "2024-10-25T01:32:12.604164Z",
     "iopub.status.idle": "2024-10-25T01:32:14.579182Z",
     "shell.execute_reply": "2024-10-25T01:32:14.577667Z"
    },
    "papermill": {
     "duration": 1.995193,
     "end_time": "2024-10-25T01:32:14.582266",
     "exception": false,
     "start_time": "2024-10-25T01:32:12.587073",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x1000 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Bước 3: Phân tích sự tương quan giữa các biến\n",
    "# Sử dụng ma trận tương quan\n",
    "corr_matrix = df.corr()\n",
    "\n",
    "# Vẽ heatmap ma trận tương quan\n",
    "plt.figure(figsize=(12, 10))\n",
    "sns.heatmap(corr_matrix, cmap='coolwarm', annot=False)\n",
    "plt.title('Ma trận tương quan')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "250cbf1b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T01:32:14.619797Z",
     "iopub.status.busy": "2024-10-25T01:32:14.618762Z",
     "iopub.status.idle": "2024-10-25T01:32:14.653921Z",
     "shell.execute_reply": "2024-10-25T01:32:14.652613Z"
    },
    "papermill": {
     "duration": 0.057153,
     "end_time": "2024-10-25T01:32:14.657008",
     "exception": false,
     "start_time": "2024-10-25T01:32:14.599855",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Bước 4: Chia dữ liệu thành train và test, xử lý mất cân bằng\n",
    "X = df.drop('Class', axis=1)\n",
    "y = df['Class']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "15a5099e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T01:32:14.691944Z",
     "iopub.status.busy": "2024-10-25T01:32:14.691411Z",
     "iopub.status.idle": "2024-10-25T01:32:14.912866Z",
     "shell.execute_reply": "2024-10-25T01:32:14.911540Z"
    },
    "papermill": {
     "duration": 0.242616,
     "end_time": "2024-10-25T01:32:14.916141",
     "exception": false,
     "start_time": "2024-10-25T01:32:14.673525",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Chia dữ liệu thành train và test với tỉ lệ 80:20\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "1ae89944",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T01:32:14.952014Z",
     "iopub.status.busy": "2024-10-25T01:32:14.951500Z",
     "iopub.status.idle": "2024-10-25T01:32:15.514928Z",
     "shell.execute_reply": "2024-10-25T01:32:15.513640Z"
    },
    "papermill": {
     "duration": 0.585161,
     "end_time": "2024-10-25T01:32:15.518138",
     "exception": false,
     "start_time": "2024-10-25T01:32:14.932977",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Sử dụng SMOTE để xử lý dữ liệu mất cân bằng\n",
    "smote = SMOTE(random_state=42)\n",
    "X_train_smote, y_train_smote = smote.fit_resample(X_train, y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "2f30868c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T01:32:15.556666Z",
     "iopub.status.busy": "2024-10-25T01:32:15.555755Z",
     "iopub.status.idle": "2024-10-25T01:32:15.568942Z",
     "shell.execute_reply": "2024-10-25T01:32:15.567492Z"
    },
    "papermill": {
     "duration": 0.036028,
     "end_time": "2024-10-25T01:32:15.571720",
     "exception": false,
     "start_time": "2024-10-25T01:32:15.535692",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Class\n",
      "0    226602\n",
      "1    226602\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Kiểm tra phân phối sau khi áp dụng SMOTE\n",
    "print(pd.Series(y_train_smote).value_counts())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "ad20c7ec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T01:32:15.608679Z",
     "iopub.status.busy": "2024-10-25T01:32:15.607692Z",
     "iopub.status.idle": "2024-10-25T01:32:15.917773Z",
     "shell.execute_reply": "2024-10-25T01:32:15.916480Z"
    },
    "papermill": {
     "duration": 0.331739,
     "end_time": "2024-10-25T01:32:15.920969",
     "exception": false,
     "start_time": "2024-10-25T01:32:15.589230",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Chuẩn hóa dữ liệu\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train_smote)\n",
    "X_test_scaled = scaler.transform(X_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "0ca1e50a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T01:32:15.957054Z",
     "iopub.status.busy": "2024-10-25T01:32:15.956100Z",
     "iopub.status.idle": "2024-10-25T01:32:23.687068Z",
     "shell.execute_reply": "2024-10-25T01:32:23.685700Z"
    },
    "papermill": {
     "duration": 7.752346,
     "end_time": "2024-10-25T01:32:23.690055",
     "exception": false,
     "start_time": "2024-10-25T01:32:15.937709",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Decision Tree Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00     56651\n",
      "           1       0.88      0.69      0.78        95\n",
      "\n",
      "    accuracy                           1.00     56746\n",
      "   macro avg       0.94      0.85      0.89     56746\n",
      "weighted avg       1.00      1.00      1.00     56746\n",
      "\n",
      "Confusion Matrix:\n",
      "[[56642     9]\n",
      " [   29    66]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "\n",
    "# Khởi tạo Decision Tree với các tham số tùy chỉnh\n",
    "clf_dt = DecisionTreeClassifier(\n",
    "    max_depth=5,            # Giới hạn độ sâu của cây để tránh overfitting (thử từ 3-10)\n",
    "    min_samples_split=20,    # Số lượng mẫu tối thiểu để tách một nút, nên chọn giá trị cao hơn 2\n",
    "    min_samples_leaf=10,     # Số lượng mẫu tối thiểu ở mỗi nút lá\n",
    "    random_state=42\n",
    ")\n",
    "\n",
    "# Huấn luyện mô hình\n",
    "clf_dt.fit(X_train, y_train)\n",
    "\n",
    "# Dự đoán và đánh giá\n",
    "y_pred_dt = clf_dt.predict(X_test)\n",
    "print(\"Decision Tree Report:\")\n",
    "print(classification_report(y_test, y_pred_dt))\n",
    "print(\"Confusion Matrix:\")\n",
    "print(confusion_matrix(y_test, y_pred_dt))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "4ffefcd1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T01:32:23.727947Z",
     "iopub.status.busy": "2024-10-25T01:32:23.727418Z",
     "iopub.status.idle": "2024-10-25T01:32:23.900418Z",
     "shell.execute_reply": "2024-10-25T01:32:23.898800Z"
    },
    "papermill": {
     "duration": 0.195608,
     "end_time": "2024-10-25T01:32:23.903793",
     "exception": false,
     "start_time": "2024-10-25T01:32:23.708185",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Decision Tree - The accuracy is 0.9993303492757198\n",
      "Decision Tree - The precision is 0.88\n",
      "Decision Tree - The recall is 0.6947368421052632\n",
      "Decision Tree - The F1-Score is 0.7764705882352942\n",
      "Decision Tree Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00     56651\n",
      "           1       0.88      0.69      0.78        95\n",
      "\n",
      "    accuracy                           1.00     56746\n",
      "   macro avg       0.94      0.85      0.89     56746\n",
      "weighted avg       1.00      1.00      1.00     56746\n",
      "\n",
      "Decision Tree Confusion Matrix:\n",
      "[[56642     9]\n",
      " [   29    66]]\n"
     ]
    }
   ],
   "source": [
    "# Đánh giá mô hình Decision Tree\n",
    "acc_dt = accuracy_score(y_test, y_pred_dt)\n",
    "print(\"Decision Tree - The accuracy is {}\".format(acc_dt))\n",
    "\n",
    "prec_dt = precision_score(y_test, y_pred_dt)\n",
    "print(\"Decision Tree - The precision is {}\".format(prec_dt))\n",
    "\n",
    "rec_dt = recall_score(y_test, y_pred_dt)\n",
    "print(\"Decision Tree - The recall is {}\".format(rec_dt))\n",
    "\n",
    "f1_dt = f1_score(y_test, y_pred_dt)\n",
    "print(\"Decision Tree - The F1-Score is {}\".format(f1_dt))\n",
    "\n",
    "# In classification report và confusion matrix\n",
    "print(\"Decision Tree Classification Report:\")\n",
    "print(classification_report(y_test, y_pred_dt))\n",
    "\n",
    "print(\"Decision Tree Confusion Matrix:\")\n",
    "print(confusion_matrix(y_test, y_pred_dt))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "93a7db1a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T01:32:23.942793Z",
     "iopub.status.busy": "2024-10-25T01:32:23.942247Z",
     "iopub.status.idle": "2024-10-25T01:33:10.680558Z",
     "shell.execute_reply": "2024-10-25T01:33:10.679108Z"
    },
    "papermill": {
     "duration": 46.760738,
     "end_time": "2024-10-25T01:33:10.683786",
     "exception": false,
     "start_time": "2024-10-25T01:32:23.923048",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Number of positive: 378, number of negative: 226602\n",
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.070062 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 7650\n",
      "[LightGBM] [Info] Number of data points in the train set: 226980, number of used features: 30\n",
      "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.001665 -> initscore=-6.396056\n",
      "[LightGBM] [Info] Start training from score -6.396056\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00     56651\n",
      "           1       0.60      0.67      0.64        95\n",
      "\n",
      "    accuracy                           1.00     56746\n",
      "   macro avg       0.80      0.84      0.82     56746\n",
      "weighted avg       1.00      1.00      1.00     56746\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import lightgbm as lgb\n",
    "\n",
    "# Khởi tạo mô hình LightGBM với các tham số tùy chỉnh\n",
    "clf_lgb = lgb.LGBMClassifier(\n",
    "    learning_rate=0.05,  # Giảm learning rate để mô hình học chậm hơn (tránh overfitting)\n",
    "    num_leaves=31,       # Số lượng lá trong mỗi cây (tăng num_leaves có thể dẫn đến overfitting)\n",
    "    max_depth=-1,        # Độ sâu tối đa của cây (để -1 để không giới hạn độ sâu)\n",
    "    n_estimators=1000,   # Số lượng cây (tăng số lượng cây nhưng giữ learning_rate nhỏ)\n",
    "    subsample=0.8,       # Tỷ lệ mẫu lấy ngẫu nhiên để huấn luyện mỗi cây, giúp giảm overfitting\n",
    "    colsample_bytree=0.8 # Tỷ lệ đặc trưng lấy ngẫu nhiên cho mỗi cây, tránh overfitting\n",
    ")\n",
    "\n",
    "# Huấn luyện mô hình\n",
    "clf_lgb.fit(X_train, y_train)\n",
    "\n",
    "# Dự đoán và đánh giá mô hình\n",
    "y_pred_lgb = clf_lgb.predict(X_test)\n",
    "print(classification_report(y_test, y_pred_lgb))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "8bd3dde8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T01:33:10.744139Z",
     "iopub.status.busy": "2024-10-25T01:33:10.743115Z",
     "iopub.status.idle": "2024-10-25T01:33:10.906963Z",
     "shell.execute_reply": "2024-10-25T01:33:10.905600Z"
    },
    "papermill": {
     "duration": 0.197066,
     "end_time": "2024-10-25T01:33:10.909881",
     "exception": false,
     "start_time": "2024-10-25T01:33:10.712815",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LightGBM - The accuracy is 0.9987135657138829\n",
      "LightGBM - The precision is 0.6037735849056604\n",
      "LightGBM - The recall is 0.6736842105263158\n",
      "LightGBM - The F1-Score is 0.6368159203980099\n",
      "LightGBM Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00     56651\n",
      "           1       0.60      0.67      0.64        95\n",
      "\n",
      "    accuracy                           1.00     56746\n",
      "   macro avg       0.80      0.84      0.82     56746\n",
      "weighted avg       1.00      1.00      1.00     56746\n",
      "\n",
      "LightGBM Confusion Matrix:\n",
      "[[56609    42]\n",
      " [   31    64]]\n"
     ]
    }
   ],
   "source": [
    "# Đánh giá mô hình LightGBM\n",
    "acc_lgb = accuracy_score(y_test, y_pred_lgb)\n",
    "print(\"LightGBM - The accuracy is {}\".format(acc_lgb))\n",
    "prec_lgb = precision_score(y_test, y_pred_lgb)\n",
    "print(\"LightGBM - The precision is {}\".format(prec_lgb))\n",
    "\n",
    "rec_lgb = recall_score(y_test, y_pred_lgb)\n",
    "print(\"LightGBM - The recall is {}\".format(rec_lgb))\n",
    "\n",
    "f1_lgb = f1_score(y_test, y_pred_lgb)\n",
    "print(\"LightGBM - The F1-Score is {}\".format(f1_lgb))\n",
    "\n",
    "# In classification report và confusion matrix\n",
    "print(\"LightGBM Classification Report:\")\n",
    "print(classification_report(y_test, y_pred_lgb))\n",
    "\n",
    "print(\"LightGBM Confusion Matrix:\")\n",
    "print(confusion_matrix(y_test, y_pred_lgb))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "87fc3ecc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T01:33:10.970177Z",
     "iopub.status.busy": "2024-10-25T01:33:10.969693Z",
     "iopub.status.idle": "2024-10-25T01:34:11.425666Z",
     "shell.execute_reply": "2024-10-25T01:34:11.423971Z"
    },
    "papermill": {
     "duration": 60.518648,
     "end_time": "2024-10-25T01:34:11.458173",
     "exception": false,
     "start_time": "2024-10-25T01:33:10.939525",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Decision Tree Classifier Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00     56651\n",
      "           1       0.45      0.74      0.56        95\n",
      "\n",
      "    accuracy                           1.00     56746\n",
      "   macro avg       0.73      0.87      0.78     56746\n",
      "weighted avg       1.00      1.00      1.00     56746\n",
      "\n",
      "Confusion Matrix:\n",
      "[[56566    85]\n",
      " [   25    70]]\n"
     ]
    }
   ],
   "source": [
    "# Bước 5: Xây dựng mô hình Decision Tree\n",
    "dt_model = DecisionTreeClassifier(random_state=42)\n",
    "\n",
    "# Huấn luyện mô hình\n",
    "dt_model.fit(X_train_scaled, y_train_smote)\n",
    "\n",
    "# Dự đoán trên tập test\n",
    "y_pred_dt = dt_model.predict(X_test_scaled)\n",
    "\n",
    "# Đánh giá mô hình Decision Tree\n",
    "print(\"Decision Tree Classifier Report:\")\n",
    "print(classification_report(y_test, y_pred_dt))\n",
    "print(\"Confusion Matrix:\")\n",
    "print(confusion_matrix(y_test, y_pred_dt))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "6e763574",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T01:34:11.521960Z",
     "iopub.status.busy": "2024-10-25T01:34:11.521291Z",
     "iopub.status.idle": "2024-10-25T01:34:11.703436Z",
     "shell.execute_reply": "2024-10-25T01:34:11.702136Z"
    },
    "papermill": {
     "duration": 0.218303,
     "end_time": "2024-10-25T01:34:11.706405",
     "exception": false,
     "start_time": "2024-10-25T01:34:11.488102",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Decision Tree - The accuracy is 0.9980615373770838\n",
      "Decision Tree - The precision is 0.45161290322580644\n",
      "Decision Tree - The recall is 0.7368421052631579\n",
      "Decision Tree - The F1-Score is 0.56\n",
      "Decision Tree Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00     56651\n",
      "           1       0.45      0.74      0.56        95\n",
      "\n",
      "    accuracy                           1.00     56746\n",
      "   macro avg       0.73      0.87      0.78     56746\n",
      "weighted avg       1.00      1.00      1.00     56746\n",
      "\n",
      "Decision Tree Confusion Matrix:\n",
      "[[56566    85]\n",
      " [   25    70]]\n"
     ]
    }
   ],
   "source": [
    "# Đánh giá mô hình Decision Tree\n",
    "acc_dt = accuracy_score(y_test, y_pred_dt)\n",
    "print(\"Decision Tree - The accuracy is {}\".format(acc_dt))\n",
    "\n",
    "prec_dt = precision_score(y_test, y_pred_dt)\n",
    "print(\"Decision Tree - The precision is {}\".format(prec_dt))\n",
    "\n",
    "rec_dt = recall_score(y_test, y_pred_dt)\n",
    "print(\"Decision Tree - The recall is {}\".format(rec_dt))\n",
    "\n",
    "f1_dt = f1_score(y_test, y_pred_dt)\n",
    "print(\"Decision Tree - The F1-Score is {}\".format(f1_dt))\n",
    "\n",
    "# In classification report và confusion matrix\n",
    "print(\"Decision Tree Classification Report:\")\n",
    "print(classification_report(y_test, y_pred_dt))\n",
    "\n",
    "print(\"Decision Tree Confusion Matrix:\")\n",
    "print(confusion_matrix(y_test, y_pred_dt))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "4581a81f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T01:34:11.769052Z",
     "iopub.status.busy": "2024-10-25T01:34:11.767925Z",
     "iopub.status.idle": "2024-10-25T01:34:34.704188Z",
     "shell.execute_reply": "2024-10-25T01:34:34.702627Z"
    },
    "papermill": {
     "duration": 22.970711,
     "end_time": "2024-10-25T01:34:34.707296",
     "exception": false,
     "start_time": "2024-10-25T01:34:11.736585",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Number of positive: 226602, number of negative: 226602\n",
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.285786 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 7650\n",
      "[LightGBM] [Info] Number of data points in the train set: 453204, number of used features: 30\n",
      "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n",
      "LightGBM Classifier Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00     56651\n",
      "           1       0.66      0.78      0.71        95\n",
      "\n",
      "    accuracy                           1.00     56746\n",
      "   macro avg       0.83      0.89      0.86     56746\n",
      "weighted avg       1.00      1.00      1.00     56746\n",
      "\n",
      "Confusion Matrix:\n",
      "[[56613    38]\n",
      " [   21    74]]\n"
     ]
    }
   ],
   "source": [
    "import lightgbm as lgb\n",
    "\n",
    "# Khởi tạo LightGBM model\n",
    "lgb_model = lgb.LGBMClassifier(random_state=42)\n",
    "\n",
    "# Huấn luyện mô hình\n",
    "lgb_model.fit(X_train_scaled, y_train_smote)\n",
    "\n",
    "# Dự đoán\n",
    "y_pred_lgb = lgb_model.predict(X_test_scaled)\n",
    "\n",
    "# Đánh giá mô hình\n",
    "print(\"LightGBM Classifier Report:\")\n",
    "print(classification_report(y_test, y_pred_lgb))\n",
    "print(\"Confusion Matrix:\")\n",
    "print(confusion_matrix(y_test, y_pred_lgb))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "fee5a1d5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T01:34:34.772002Z",
     "iopub.status.busy": "2024-10-25T01:34:34.771455Z",
     "iopub.status.idle": "2024-10-25T01:34:34.949016Z",
     "shell.execute_reply": "2024-10-25T01:34:34.947798Z"
    },
    "papermill": {
     "duration": 0.21309,
     "end_time": "2024-10-25T01:34:34.952233",
     "exception": false,
     "start_time": "2024-10-25T01:34:34.739143",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LightGBM - The accuracy is 0.9989602791386177\n",
      "LightGBM - The precision is 0.6607142857142857\n",
      "LightGBM - The recall is 0.7789473684210526\n",
      "LightGBM - The F1-Score is 0.7149758454106279\n",
      "LightGBM Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00     56651\n",
      "           1       0.66      0.78      0.71        95\n",
      "\n",
      "    accuracy                           1.00     56746\n",
      "   macro avg       0.83      0.89      0.86     56746\n",
      "weighted avg       1.00      1.00      1.00     56746\n",
      "\n",
      "LightGBM Confusion Matrix:\n",
      "[[56613    38]\n",
      " [   21    74]]\n"
     ]
    }
   ],
   "source": [
    "# Đánh giá mô hình LightGBM\n",
    "acc_lgb = accuracy_score(y_test, y_pred_lgb)\n",
    "print(\"LightGBM - The accuracy is {}\".format(acc_lgb))\n",
    "\n",
    "prec_lgb = precision_score(y_test, y_pred_lgb)\n",
    "print(\"LightGBM - The precision is {}\".format(prec_lgb))\n",
    "\n",
    "rec_lgb = recall_score(y_test, y_pred_lgb)\n",
    "print(\"LightGBM - The recall is {}\".format(rec_lgb))\n",
    "\n",
    "f1_lgb = f1_score(y_test, y_pred_lgb)\n",
    "print(\"LightGBM - The F1-Score is {}\".format(f1_lgb))\n",
    "\n",
    "# In classification report và confusion matrix\n",
    "print(\"LightGBM Classification Report:\")\n",
    "print(classification_report(y_test, y_pred_lgb))\n",
    "\n",
    "print(\"LightGBM Confusion Matrix:\")\n",
    "print(confusion_matrix(y_test, y_pred_lgb))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4fdb7a13",
   "metadata": {
    "papermill": {
     "duration": 0.029557,
     "end_time": "2024-10-25T01:34:35.011586",
     "exception": false,
     "start_time": "2024-10-25T01:34:34.982029",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 310,
     "sourceId": 23498,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30786,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 177.469927,
   "end_time": "2024-10-25T01:34:37.072283",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-10-25T01:31:39.602356",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
